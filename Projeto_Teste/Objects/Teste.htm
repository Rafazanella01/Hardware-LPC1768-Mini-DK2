<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Teste.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Teste.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060528: Last Updated: Wed Apr 03 08:37:15 2024
<BR><P>
<H3>Maximum Stack Usage =        512 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvIPTask &rArr; prvHandleEthernetPacket &rArr; prvProcessEthernetPacket &rArr; prvProcessIPPacket &rArr; xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[66]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[69]">check_failed</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[69]">check_failed</a><BR>
 <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
 <LI><a href="#[95]">FreeRTOS_setsockopt</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[95]">FreeRTOS_setsockopt</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[25]">BOD_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[30]">CANActivity_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[27]">CAN_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[28]">DMA_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[20]">EINT0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[21]">EINT1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[22]">EINT2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[23]">EINT3_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2a]">ENET_IRQHandler</a> from networkhal.o(i.ENET_IRQHandler) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[18]">I2C0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1a]">I2C2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[29]">I2S_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2c]">MCPWM_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1e]">PLL0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2e]">PLL1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[17]">PWM1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2d]">QEI_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2b]">RIT_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1b]">SPI_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1c]">SSP0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[1d]">SSP1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[f]">TIMER0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[10]">TIMER1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[11]">TIMER2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[12]">TIMER3_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[13]">UART0_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[14]">UART1_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[15]">UART2_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[16]">UART3_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[2f]">USBActivity_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[e]">WDT_IRQHandler</a> from startup_mps_cm3.o(.text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[40]">__main</a> from __main.o(!!!main) referenced from startup_mps_cm3.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[36]">blinkCallBack</a> from main.o(i.blinkCallBack) referenced from main.o(i.main)
 <LI><a href="#[39]">leBotoesMensagens</a> from main.o(i.leBotoesMensagens) referenced from main.o(i.main)
 <LI><a href="#[38]">lerBotaoLed</a> from main.o(i.lerBotaoLed) referenced from main.o(i.main)
 <LI><a href="#[3b]">potenciometro</a> from main.o(i.potenciometro) referenced from main.o(i.main)
 <LI><a href="#[35]">prvEMACDeferredInterruptHandlerTask</a> from networkhal.o(i.prvEMACDeferredInterruptHandlerTask) referenced from networkhal.o(i.InitialiseNetwork)
 <LI><a href="#[34]">prvIPTask</a> from freertos_ip.o(i.prvIPTask) referenced from freertos_ip.o(i.FreeRTOS_IPInit)
 <LI><a href="#[3e]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[3d]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3f]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[3a]">recebeEnviaSerial</a> from main.o(i.recebeEnviaSerial) referenced from main.o(i.main)
 <LI><a href="#[a]">vPortSVCHandler</a> from port.o(.emb_text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[37]">vTaskRetornoLed2</a> from main.o(i.vTaskRetornoLed2) referenced from main.o(i.main)
 <LI><a href="#[3c]">vUDPServer</a> from main.o(i.vUDPServer) referenced from main.o(i.main)
 <LI><a href="#[c]">xPortPendSVHandler</a> from port.o(.emb_text) referenced from startup_mps_cm3.o(RESET)
 <LI><a href="#[d]">xPortSysTickHandler</a> from port.o(i.xPortSysTickHandler) referenced from startup_mps_cm3.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[40]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[41]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[43]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[44]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[14e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[59]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[45]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[14f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[150]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[151]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[152]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[153]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[154]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[155]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[156]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[157]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[158]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[159]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[160]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[161]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[162]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[163]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[164]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[165]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[166]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[167]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[168]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[169]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[42]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[16c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[16d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; FreeRTOS_IPInit &rArr; xNetworkBuffersInitialise &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[16e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[67]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[16f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[a]"></a>vPortSVCHandler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13e]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[c]"></a>xPortPendSVHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xPortPendSVHandler &rArr; vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[170]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[55]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mps_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mps_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[171]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__2sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;potenciometro
</UL>

<P><STRONG><a name="[58]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[46]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
</UL>

<P><STRONG><a name="[b2]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPRefreshCacheEntry
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eConsiderFrameForProcessing
</UL>

<P><STRONG><a name="[d0]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[5e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPBufferResize
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPGenerateRequestPacket
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferGet
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferAdd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[5b]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[172]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[5d]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[173]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[138]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[62]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[61]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpCreateStream
</UL>

<P><STRONG><a name="[177]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[179]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[57]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[5f]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[17e]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[180]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[181]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>ADC_ChannelCmd</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lpc17xx_adc.o(i.ADC_ChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
</UL>

<P><STRONG><a name="[6a]"></a>ADC_ChannelGetData</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lpc17xx_adc.o(i.ADC_ChannelGetData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelGetData
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
</UL>

<P><STRONG><a name="[6b]"></a>ADC_ChannelGetStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lpc17xx_adc.o(i.ADC_ChannelGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ChannelGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
</UL>

<P><STRONG><a name="[6c]"></a>ADC_Init</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lpc17xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>ADC_StartCmd</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lpc17xx_adc.o(i.ADC_StartCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_StartCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
</UL>

<P><STRONG><a name="[6d]"></a>CLKPWR_ConfigPPWR</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_ConfigPPWR))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[6e]"></a>CLKPWR_GetPCLK</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lpc17xx_clkpwr.o(i.CLKPWR_GetPCLK))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[df]"></a>EMAC_CheckReceiveDataStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_CheckReceiveDataStatus))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[78]"></a>EMAC_CheckReceiveIndex</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_CheckReceiveIndex))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[a3]"></a>EMAC_CheckTransmitIndex</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_CheckTransmitIndex))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[e0]"></a>EMAC_GetReceiveDataSize</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_GetReceiveDataSize))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[70]"></a>EMAC_Init</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lpc17xx_emac.o(i.EMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EMAC_Init &rArr; EMAC_SetPHYMode &rArr; EMAC_UpdatePHYStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_descr_init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEmacAddr
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_descr_init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYMode
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseNetwork
</UL>

<P><STRONG><a name="[e1]"></a>EMAC_ReadPacketBuffer</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lpc17xx_emac.o(i.EMAC_ReadPacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EMAC_ReadPacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[73]"></a>EMAC_SetPHYMode</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lpc17xx_emac.o(i.EMAC_SetPHYMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EMAC_SetPHYMode &rArr; EMAC_UpdatePHYStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_PHY
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdatePHYStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[77]"></a>EMAC_UpdatePHYStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lpc17xx_emac.o(i.EMAC_UpdatePHYStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMAC_UpdatePHYStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYMode
</UL>

<P><STRONG><a name="[e2]"></a>EMAC_UpdateRxConsumeIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_UpdateRxConsumeIndex))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[a5]"></a>EMAC_UpdateTxProduceIndex</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.EMAC_UpdateTxProduceIndex))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[a4]"></a>EMAC_WritePacketBuffer</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lpc17xx_emac.o(i.EMAC_WritePacketBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EMAC_WritePacketBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
</UL>

<P><STRONG><a name="[2a]"></a>ENET_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, networkhal.o(i.ENET_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ENET_IRQHandler &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_CheckReceiveIndex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>FreeRTOS_IPInit</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, freertos_ip.o(i.FreeRTOS_IPInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = FreeRTOS_IPInit &rArr; xNetworkBuffersInitialise &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkBuffersInitialise
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNetworkSocketsInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>FreeRTOS_NetworkDown</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, freertos_ip.o(i.FreeRTOS_NetworkDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FreeRTOS_NetworkDown &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[82]"></a>FreeRTOS_OutputARPRequest</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, freertos_arp.o(i.FreeRTOS_OutputARPRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FreeRTOS_OutputARPRequest &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPGenerateRequestPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPAgeCache
</UL>

<P><STRONG><a name="[86]"></a>FreeRTOS_bind</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, freertos_sockets.o(i.FreeRTOS_bind))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FreeRTOS_bind &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[88]"></a>FreeRTOS_closesocket</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, freertos_sockets.o(i.FreeRTOS_closesocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
</UL>

<P><STRONG><a name="[89]"></a>FreeRTOS_outstanding</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, freertos_sockets.o(i.FreeRTOS_outstanding))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FreeRTOS_outstanding &rArr; lStreamBufferGetSize
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_setsockopt
</UL>

<P><STRONG><a name="[8b]"></a>FreeRTOS_recvfrom</STRONG> (Thumb, 230 bytes, Stack size 72 bytes, freertos_sockets.o(i.FreeRTOS_recvfrom))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FreeRTOS_recvfrom &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvValidSocket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[93]"></a>FreeRTOS_sendto</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, freertos_sockets.o(i.FreeRTOS_sendto))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = FreeRTOS_sendto &rArr; FreeRTOS_bind &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_bind
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxUDPPayloadBuffer_to_NetworkBuffer
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[95]"></a>FreeRTOS_setsockopt</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, freertos_sockets.o(i.FreeRTOS_setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = FreeRTOS_setsockopt &rArr;  FreeRTOS_setsockopt (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_setsockopt
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_outstanding
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_setsockopt
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
</UL>

<P><STRONG><a name="[97]"></a>FreeRTOS_socket</STRONG> (Thumb, 150 bytes, Stack size 32 bytes, freertos_sockets.o(i.FreeRTOS_socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FreeRTOS_socket &rArr; xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDetermineSocketSize
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vUDPServer
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
</UL>

<P><STRONG><a name="[ab]"></a>GPIO_ClearValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_ClearValue))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRetornoLed2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkCallBack
</UL>

<P><STRONG><a name="[aa]"></a>GPIO_ReadValue</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_ReadValue))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRetornoLed2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lerBotaoLed
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leBotoesMensagens
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkCallBack
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_SetDir</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_SetDir))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>GPIO_SetValue</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lpc17xx_gpio.o(i.GPIO_SetValue))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRetornoLed2
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blinkCallBack
</UL>

<P><STRONG><a name="[ca]"></a>PINSEL_ConfigPin</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, lpc17xx_pinsel.o(i.PINSEL_ConfigPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEthernetPins
</UL>

<P><STRONG><a name="[c6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 300 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c5]"></a>SystemInit</STRONG> (Thumb, 298 bytes, Stack size 0 bytes, system_lpc17xx.o(i.SystemInit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>UART_ConfigStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_ConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>UART_FIFOConfigStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lpc17xx_uart.o(i.UART_FIFOConfigStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>UART_Init</STRONG> (Thumb, 726 bytes, Stack size 64 bytes, lpc17xx_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UART_Init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_GetPCLK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLKPWR_ConfigPPWR
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>UART_Send</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, lpc17xx_uart.o(i.UART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
</UL>

<P><STRONG><a name="[a9]"></a>UART_TxCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lpc17xx_uart.o(i.UART_TxCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_TxCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>check_failed</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lpc17xx_libcfg_default.o(i.check_failed))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_failed
</UL>

<P><STRONG><a name="[ad]"></a>eARPGetCacheEntry</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, freertos_arp.o(i.eARPGetCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = eARPGetCacheEntry &rArr; prvCacheLookup
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCacheLookup
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
</UL>

<P><STRONG><a name="[af]"></a>eARPProcessPacket</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, freertos_arp.o(i.eARPProcessPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = eARPProcessPacket &rArr; vARPRefreshCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPRefreshCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessEthernetPacket
</UL>

<P><STRONG><a name="[b1]"></a>eConsiderFrameForProcessing</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, freertos_ip.o(i.eConsiderFrameForProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = eConsiderFrameForProcessing &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
</UL>

<P><STRONG><a name="[b3]"></a>lStreamBufferAdd</STRONG> (Thumb, 240 bytes, Stack size 40 bytes, freertos_stream_buffer.o(i.lStreamBufferAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lStreamBufferAdd
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPAddRxdata
</UL>

<P><STRONG><a name="[b8]"></a>lStreamBufferGet</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, freertos_stream_buffer.o(i.lStreamBufferGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lStreamBufferGet
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[bb]"></a>lTCPAddRxdata</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, freertos_sockets.o(i.lTCPAddRxdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lTCPAddRxdata &rArr; prvTcpCreateStream &rArr; vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferAdd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpCreateStream
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferFrontSpace
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreRxData
</UL>

<P><STRONG><a name="[111]"></a>lTCPWindowRxCheck</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, freertos_tcp_win.o(i.lTCPWindowRxCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lTCPWindowRxCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreRxData
</UL>

<P><STRONG><a name="[bd]"></a>lTCPWindowTxAdd</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, freertos_tcp_win.o(i.lTCPWindowTxAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lTCPWindowTxAdd &rArr; vTCPTimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPTimerSet
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPAddTxData
</UL>

<P><STRONG><a name="[39]"></a>leBotoesMensagens</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, main.o(i.leBotoesMensagens))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = leBotoesMensagens &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[c2]"></a>leCanalAD</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, main.o(i.leCanalAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = leCanalAD &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetStatus
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelGetData
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;potenciometro
</UL>

<P><STRONG><a name="[38]"></a>lerBotaoLed</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.lerBotaoLed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lerBotaoLed &rArr; vTaskSuspend &rArr; vApplicationStackOverflowHook &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = main &rArr; FreeRTOS_IPInit &rArr; xNetworkBuffersInitialise &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TxCmd
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_FIFOConfigStructInit
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ConfigStructInit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDir
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>mensagemUART</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.mensagemUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mensagemUART &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recebeEnviaSerial
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;potenciometro
</UL>

<P><STRONG><a name="[3b]"></a>potenciometro</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, main.o(i.potenciometro))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = potenciometro &rArr; mensagemUART &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[99]"></a>pvPortMalloc</STRONG> (Thumb, 318 bytes, Stack size 40 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpCreateStream
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>

<P><STRONG><a name="[146]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[83]"></a>pxGetNetworkBufferWithDescriptor</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, bufferallocation_2.o(i.pxGetNetworkBufferWithDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPBufferResize
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_OutputARPRequest
</UL>

<P><STRONG><a name="[135]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[140]"></a>pxTCPSocketLookup</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, freertos_sockets.o(i.pxTCPSocketLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pxTCPSocketLookup
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[94]"></a>pxUDPPayloadBuffer_to_NetworkBuffer</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, freertos_ip.o(i.pxUDPPayloadBuffer_to_NetworkBuffer))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
</UL>

<P><STRONG><a name="[126]"></a>pxUDPSocketLookup</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, freertos_sockets.o(i.pxUDPSocketLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = pxUDPSocketLookup &rArr; pxListFindListItemWithValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxListFindListItemWithValue
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
</UL>

<P><STRONG><a name="[3a]"></a>recebeEnviaSerial</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, main.o(i.recebeEnviaSerial))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = recebeEnviaSerial &rArr; mensagemUART &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[a0]"></a>setEthernetPins</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, networkhal.o(i.setEthernetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = setEthernetPins &rArr; PINSEL_ConfigPin
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PINSEL_ConfigPin
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseNetwork
</UL>

<P><STRONG><a name="[128]"></a>ulDNSHandlePacket</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, freertos_dns.o(i.ulDNSHandlePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ulDNSHandlePacket &rArr; prvParseDNSReply
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvParseDNSReply
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
</UL>

<P><STRONG><a name="[e6]"></a>ulTCPWindowTxAck</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, freertos_tcp_win.o(i.ulTCPWindowTxAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ulTCPWindowTxAck
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[11b]"></a>ulTCPWindowTxGet</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, freertos_tcp_win.o(i.ulTCPWindowTxGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ulTCPWindowTxGet &rArr; vTCPTimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPTimerSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTimerGetAge
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
</UL>

<P><STRONG><a name="[127]"></a>ulTaskNotifyTake</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tasks.o(i.ulTaskNotifyTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ulTaskNotifyTake &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recebeEnviaSerial
</UL>

<P><STRONG><a name="[d7]"></a>usGenerateChecksum</STRONG> (Thumb, 350 bytes, Stack size 40 bytes, freertos_ip.o(i.usGenerateChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = usGenerateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateProtocolChecksum
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllowIPPacket
</UL>

<P><STRONG><a name="[d8]"></a>usGenerateProtocolChecksum</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, freertos_ip.o(i.usGenerateProtocolChecksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = usGenerateProtocolChecksum &rArr; usGenerateChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllowIPPacket
</UL>

<P><STRONG><a name="[90]"></a>uxListRemove</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>

<P><STRONG><a name="[db]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, queue.o(i.uxQueueMessagesWaiting))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxQueueMessagesWaiting
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEthernetPacket
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[13a]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.uxTaskResetEventItemValue))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[fa]"></a>vARPAgeCache</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, freertos_arp.o(i.vARPAgeCache))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vARPAgeCache &rArr; FreeRTOS_OutputARPRequest &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_OutputARPRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[84]"></a>vARPGenerateRequestPacket</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, freertos_arp.o(i.vARPGenerateRequestPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vARPGenerateRequestPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_OutputARPRequest
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
</UL>

<P><STRONG><a name="[b0]"></a>vARPRefreshCacheEntry</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, freertos_arp.o(i.vARPRefreshCacheEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vARPRefreshCacheEntry &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eARPProcessPacket
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[134]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertosappstaticalloc.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[14b]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertosappstaticalloc.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[109]"></a>vApplicationIPNetworkEventHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.vApplicationIPNetworkEventHook))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIPNetworkUpCalls
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
</UL>

<P><STRONG><a name="[12a]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vApplicationStackOverflowHook &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[12b]"></a>vEventGroupDelete</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, event_groups.o(i.vEventGroupDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vEventGroupDelete &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
</UL>

<P><STRONG><a name="[10b]"></a>vIPNetworkUpCalls</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, freertos_ip.o(i.vIPNetworkUpCalls))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vIPNetworkUpCalls &rArr; prvIPTimerReload &rArr; prvIPTimerStart &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIPNetworkEventHook
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerReload
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
</UL>

<P><STRONG><a name="[9d]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkBuffersInitialise
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vNetworkSocketsInit
</UL>

<P><STRONG><a name="[9e]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkBuffersInitialise
</UL>

<P><STRONG><a name="[d4]"></a>vListInsert</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkBuffersInitialise
</UL>

<P><STRONG><a name="[d3]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketBind
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>

<P><STRONG><a name="[7d]"></a>vNetworkSocketsInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, freertos_sockets.o(i.vNetworkSocketsInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vNetworkSocketsInit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
</UL>

<P><STRONG><a name="[8f]"></a>vPortEnterCritical</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>

<P><STRONG><a name="[91]"></a>vPortExitCritical</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>

<P><STRONG><a name="[9b]"></a>vPortFree</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBuffer
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
</UL>

<P><STRONG><a name="[13d]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[fe]"></a>vProcessGeneratedUDPPacket</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, freertos_udp_ip.o(i.vProcessGeneratedUDPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = vProcessGeneratedUDPPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPGenerateRequestPacket
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eARPGetCacheEntry
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPRefreshCacheEntry
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateProtocolChecksum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateChecksum
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[7f]"></a>vQueueDelete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
</UL>

<P><STRONG><a name="[122]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[12e]"></a>vReleaseNetworkBuffer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, bufferallocation_2.o(i.vReleaseNetworkBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vReleaseNetworkBuffer &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>

<P><STRONG><a name="[92]"></a>vReleaseNetworkBufferAndDescriptor</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, bufferallocation_2.o(i.vReleaseNetworkBufferAndDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPBufferResize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessEthernetPacket
</UL>

<P><STRONG><a name="[103]"></a>vReturnEthernetFrame</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, freertos_ip.o(i.vReturnEthernetFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vReturnEthernetFrame &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessEthernetPacket
</UL>

<P><STRONG><a name="[fb]"></a>vSocketBind</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, freertos_sockets.o(i.vSocketBind))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vSocketBind &rArr; prvGetPrivatePortNumber &rArr; pxListFindListItemWithValue
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxListFindListItemWithValue
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetPrivatePortNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSocketCopy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[fd]"></a>vSocketClose</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, freertos_sockets.o(i.vSocketClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vSocketClose &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSetSocketCount
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPStatusAgeCheck
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSocketCopy
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[f3]"></a>vTCPStateChange</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.vTCPStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPTouchSocket
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSocketIsActive
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_closesocket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWakeUpSocketUser
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPStatusAgeCheck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleFin
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleSynReceived
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTcpCreateStream
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[113]"></a>vTCPWindowCreate</STRONG> (Thumb, 46 bytes, Stack size 28 bytes, freertos_tcp_win.o(i.vTCPWindowCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTCPWindowCreate &rArr; vTCPWindowInit
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPWindowInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPCreateWindow
</UL>

<P><STRONG><a name="[f5]"></a>vTCPWindowInit</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, freertos_tcp_win.o(i.vTCPWindowInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTCPWindowInit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPWindowCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleSynReceived
</UL>

<P><STRONG><a name="[d1]"></a>vTaskDelay</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRetornoLed2
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recebeEnviaSerial
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;potenciometro
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
</UL>

<P><STRONG><a name="[144]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskInternalSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[125]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[131]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[12d]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[132]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tasks.o(i.vTaskPlaceOnUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = vTaskPlaceOnUnorderedEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
</UL>

<P><STRONG><a name="[133]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[12c]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, tasks.o(i.vTaskRemoveFromUnorderedEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
</UL>

<P><STRONG><a name="[37]"></a>vTaskRetornoLed2</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.vTaskRetornoLed2))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskRetornoLed2 &rArr; vTaskDelay &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[8d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerStart
</UL>

<P><STRONG><a name="[ce]"></a>vTaskStartScheduler</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>vTaskSuspend</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskSuspend &rArr; vApplicationStackOverflowHook &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lerBotaoLed
</UL>

<P><STRONG><a name="[120]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
</UL>

<P><STRONG><a name="[52]"></a>vTaskSwitchContext</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskSwitchContext &rArr; vApplicationStackOverflowHook &rArr; UART_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortPendSVHandler
</UL>

<P><STRONG><a name="[fc]"></a>vWakeUpSocketUser</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, freertos_sockets.o(i.vWakeUpSocketUser))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vWakeUpSocketUser &rArr; xEventGroupSetBits &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPTimerCheck
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[9a]"></a>xEventGroupCreate</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, event_groups.o(i.xEventGroupCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xEventGroupCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
</UL>

<P><STRONG><a name="[139]"></a>xEventGroupSetBits</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, event_groups.o(i.xEventGroupSetBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xEventGroupSetBits &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWakeUpSocketUser
</UL>

<P><STRONG><a name="[87]"></a>xEventGroupWaitBits</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, event_groups.o(i.xEventGroupWaitBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = xEventGroupWaitBits &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskResetEventItemValue
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_bind
</UL>

<P><STRONG><a name="[de]"></a>xIPIsNetworkTaskReady</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, freertos_ip.o(i.xIPIsNetworkTaskReady))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxListFindListItemWithValue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDetermineSocketSize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>

<P><STRONG><a name="[13b]"></a>xIsCallingFromIPTask</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, freertos_ip.o(i.xIsCallingFromIPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xIsCallingFromIPTask
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>

<P><STRONG><a name="[7c]"></a>xNetworkBuffersInitialise</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, bufferallocation_2.o(i.xNetworkBuffersInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xNetworkBuffersInitialise &rArr; xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
</UL>

<P><STRONG><a name="[10a]"></a>xNetworkInterfaceInitialise</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, networkhal.o(i.xNetworkInterfaceInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = xNetworkInterfaceInitialise &rArr; InitialiseNetwork &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
</UL>

<P><STRONG><a name="[85]"></a>xNetworkInterfaceOutput</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, networkhal.o(i.xNetworkInterfaceOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_OutputARPRequest
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReturnEthernetFrame
</UL>

<P><STRONG><a name="[137]"></a>xPortStartScheduler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[d]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mps_cm3.o(RESET)
</UL>
<P><STRONG><a name="[108]"></a>xProcessReceivedTCPPacket</STRONG> (Thumb, 358 bytes, Stack size 48 bytes, freertos_tcp_ip.o(i.xProcessReceivedTCPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPTouchSocket
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSocketIsActive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendReset
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPNextTimeout
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckOptions
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxTCPSocketLookup
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[107]"></a>xProcessReceivedUDPPacket</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, freertos_udp_ip.o(i.xProcessReceivedUDPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xProcessReceivedUDPPacket &rArr; xEventGroupSetBits &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulDNSHandlePacket
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxUDPSocketLookup
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPRefreshCacheEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[a1]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseNetwork
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkBuffersInitialise
</UL>

<P><STRONG><a name="[cb]"></a>xQueueCreateMutex</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7b]"></a>xQueueGenericCreate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leBotoesMensagens
</UL>

<P><STRONG><a name="[142]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xQueueGenericCreateStatic
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[c1]"></a>xQueueGenericSend</STRONG> (Thumb, 364 bytes, Stack size 64 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leBotoesMensagens
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>

<P><STRONG><a name="[145]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGenericSendFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[79]"></a>xQueueGiveFromISR</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENET_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>xQueueReceive</STRONG> (Thumb, 272 bytes, Stack size 56 bytes, queue.o(i.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[c3]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, queue.o(i.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recebeEnviaSerial
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mensagemUART
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leCanalAD
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
</UL>

<P><STRONG><a name="[81]"></a>xSendEventStructToIPTask</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, freertos_ip.o(i.xSendEventStructToIPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsCallingFromIPTask
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIPIsNetworkTaskReady
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_bind
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvEMACDeferredInterruptHandlerTask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_closesocket
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventToIPTask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_NetworkDown
</UL>

<P><STRONG><a name="[96]"></a>xSendEventToIPTask</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, freertos_ip.o(i.xSendEventToIPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xSendEventToIPTask &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_setsockopt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPAddRxdata
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[ff]"></a>xTCPCheckNewClient</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, freertos_tcp_ip.o(i.xTCPCheckNewClient))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTCPCheckNewClient
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[148]"></a>xTCPSocketCheck</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, freertos_tcp_ip.o(i.xTCPSocketCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = xTCPSocketCheck &rArr; prvTCPSendPacket &rArr; prvTCPSendRepeated &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPStatusAgeCheck
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPNextTimeout
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPAddTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPTimerCheck
</UL>

<P><STRONG><a name="[dc]"></a>xTCPTimerCheck</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, freertos_sockets.o(i.xTCPTimerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = xTCPTimerCheck &rArr; xTCPSocketCheck &rArr; prvTCPSendPacket &rArr; prvTCPSendRepeated &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPSocketCheck
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWakeUpSocketUser
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[e8]"></a>xTCPWindowRxEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, freertos_tcp_win.o(i.xTCPWindowRxEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[e9]"></a>xTCPWindowTxDone</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, freertos_tcp_win.o(i.xTCPWindowTxDone))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[119]"></a>xTCPWindowTxHasData</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, freertos_tcp_win.o(i.xTCPWindowTxHasData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTCPWindowTxHasData &rArr; ulTimerGetAge
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTimerGetAge
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPWindowTxHasSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPNextTimeout
</UL>

<P><STRONG><a name="[8e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerCheck
</UL>

<P><STRONG><a name="[7e]"></a>xTaskCreate</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_IPInit
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseNetwork
</UL>

<P><STRONG><a name="[14a]"></a>xTaskCreateStatic</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[c0]"></a>xTaskGenericNotify</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskGenericNotify
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leBotoesMensagens
</UL>

<P><STRONG><a name="[13c]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetCurrentTaskHandle))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIsCallingFromIPTask
</UL>

<P><STRONG><a name="[10d]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[bf]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leBotoesMensagens
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPTimerSet
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTimerGetAge
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPTouchSocket
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPStatusAgeCheck
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPTimerCheck
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPAgeCache
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[13f]"></a>xTaskIncrementTick</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[143]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[147]"></a>xTaskPriorityInherit</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[124]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[121]"></a>xTaskResumeAll</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupWaitBits
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xEventGroupSetBits
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vEventGroupDelete
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
</UL>

<P><STRONG><a name="[cc]"></a>xTimerCreate</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, timers.o(i.xTimerCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xTimerCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[cd]"></a>xTimerGenericCommand</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[36]"></a>blinkCallBack</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, main.o(i.blinkCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = blinkCallBack
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetValue
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadValue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3c]"></a>vUDPServer</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, main.o(i.vUDPServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vUDPServer &rArr; FreeRTOS_sendto &rArr; FreeRTOS_bind &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_setsockopt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_sendto
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_bind
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3d]"></a>prvTaskExitError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[123]"></a>prvUnlockQueue</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[d2]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
</UL>

<P><STRONG><a name="[d5]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvAddNewTaskToReadyList
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
</UL>

<P><STRONG><a name="[3e]"></a>prvIdleTask</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvIdleTask &rArr; vPortFree &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[10c]"></a>prvSampleTimeNow</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[3f]"></a>prvTimerTask</STRONG> (Thumb, 672 bytes, Stack size 48 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvTimerTask &rArr; prvSampleTimeNow &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[d6]"></a>prvAllowIPPacket</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, freertos_ip.o(i.prvAllowIPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvAllowIPPacket &rArr; usGenerateProtocolChecksum &rArr; usGenerateChecksum
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateProtocolChecksum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[f7]"></a>prvCalculateSleepTime</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, freertos_ip.o(i.prvCalculateSleepTime))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[d9]"></a>prvCheckNetworkTimers</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, freertos_ip.o(i.prvCheckNetworkTimers))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = prvCheckNetworkTimers &rArr; xTCPTimerCheck &rArr; xTCPSocketCheck &rArr; prvTCPSendPacket &rArr; prvTCPSendRepeated &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPTimerCheck
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventToIPTask
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerStart
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[ec]"></a>prvHandleEthernetPacket</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, freertos_ip.o(i.prvHandleEthernetPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = prvHandleEthernetPacket &rArr; prvProcessEthernetPacket &rArr; prvProcessIPPacket &rArr; xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessEthernetPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[34]"></a>prvIPTask</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, freertos_ip.o(i.prvIPTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 512 + Unknown Stack Size
<LI>Call Chain = prvIPTask &rArr; prvHandleEthernetPacket &rArr; prvProcessEthernetPacket &rArr; prvProcessIPPacket &rArr; xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPCheckNewClient
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vWakeUpSocketUser
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketBind
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vProcessGeneratedUDPPacket
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPAgeCache
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_NetworkDown
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessNetworkDownEvent
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerReload
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEthernetPacket
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCalculateSleepTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_ip.o(i.FreeRTOS_IPInit)
</UL>
<P><STRONG><a name="[da]"></a>prvIPTimerCheck</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, freertos_ip.o(i.prvIPTimerCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIPTimerCheck &rArr; xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[f6]"></a>prvIPTimerReload</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, freertos_ip.o(i.prvIPTimerReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvIPTimerReload &rArr; prvIPTimerStart &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerStart
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIPNetworkUpCalls
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[dd]"></a>prvIPTimerStart</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, freertos_ip.o(i.prvIPTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIPTimerStart &rArr; vTaskSetTimeOutState
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerReload
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTimerCheck
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckNetworkTimers
</UL>

<P><STRONG><a name="[ed]"></a>prvProcessEthernetPacket</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, freertos_ip.o(i.prvProcessEthernetPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = prvProcessEthernetPacket &rArr; prvProcessIPPacket &rArr; xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eARPProcessPacket
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReturnEthernetFrame
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEthernetPacket
</UL>

<P><STRONG><a name="[105]"></a>prvProcessICMPEchoRequest</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, freertos_ip.o(i.prvProcessICMPEchoRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvProcessICMPEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessICMPPacket
</UL>

<P><STRONG><a name="[104]"></a>prvProcessICMPPacket</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, freertos_ip.o(i.prvProcessICMPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvProcessICMPPacket &rArr; prvProcessICMPEchoRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessICMPEchoRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessIPPacket
</UL>

<P><STRONG><a name="[102]"></a>prvProcessIPPacket</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, freertos_ip.o(i.prvProcessIPPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = prvProcessIPPacket &rArr; xProcessReceivedTCPPacket &rArr; prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedUDPPacket
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vARPRefreshCacheEntry
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessICMPPacket
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllowIPPacket
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessEthernetPacket
</UL>

<P><STRONG><a name="[f9]"></a>prvProcessNetworkDownEvent</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, freertos_ip.o(i.prvProcessNetworkDownEvent))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = prvProcessNetworkDownEvent &rArr; xNetworkInterfaceInitialise &rArr; InitialiseNetwork &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationIPNetworkEventHook
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceInitialise
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vIPNetworkUpCalls
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_NetworkDown
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIPTask
</UL>

<P><STRONG><a name="[b4]"></a>lStreamBufferFrontSpace</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_sockets.o(i.lStreamBufferFrontSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lStreamBufferFrontSpace &rArr; lStreamBufferSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPAddRxdata
</UL>

<P><STRONG><a name="[8a]"></a>lStreamBufferGetSize</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, freertos_sockets.o(i.lStreamBufferGetSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lStreamBufferGetSize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_outstanding
</UL>

<P><STRONG><a name="[b5]"></a>lStreamBufferSpace</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, freertos_sockets.o(i.lStreamBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lStreamBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferFrontSpace
</UL>

<P><STRONG><a name="[98]"></a>prvDetermineSocketSize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, freertos_sockets.o(i.prvDetermineSocketSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvDetermineSocketSize
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIPIsNetworkTaskReady
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
</UL>

<P><STRONG><a name="[e3]"></a>prvGetPrivatePortNumber</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, freertos_sockets.o(i.prvGetPrivatePortNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvGetPrivatePortNumber &rArr; pxListFindListItemWithValue
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxListFindListItemWithValue
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketBind
</UL>

<P><STRONG><a name="[12f]"></a>prvTCPSetSocketCount</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, freertos_sockets.o(i.prvTCPSetSocketCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvTCPSetSocketCount
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
</UL>

<P><STRONG><a name="[bc]"></a>prvTcpCreateStream</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, freertos_sockets.o(i.prvTcpCreateStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvTcpCreateStream &rArr; vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPAddRxdata
</UL>

<P><STRONG><a name="[8c]"></a>prvValidSocket</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, freertos_sockets.o(i.prvValidSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvValidSocket
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_recvfrom
</UL>

<P><STRONG><a name="[e4]"></a>pxListFindListItemWithValue</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, freertos_sockets.o(i.pxListFindListItemWithValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pxListFindListItemWithValue
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xIPIsNetworkTaskReady
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxUDPSocketLookup
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetPrivatePortNumber
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketBind
</UL>

<P><STRONG><a name="[ae]"></a>prvCacheLookup</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, freertos_arp.o(i.prvCacheLookup))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvCacheLookup
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eARPGetCacheEntry
</UL>

<P><STRONG><a name="[ba]"></a>lStreamBufferDistance</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, freertos_tcp_ip.o(i.lStreamBufferDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lStreamBufferDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferMidSpace
</UL>

<P><STRONG><a name="[b6]"></a>lStreamBufferFrontSpace</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_tcp_ip.o(i.lStreamBufferFrontSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lStreamBufferFrontSpace &rArr; lStreamBufferSpace
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
</UL>

<P><STRONG><a name="[b9]"></a>lStreamBufferMidSpace</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, freertos_tcp_ip.o(i.lStreamBufferMidSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lStreamBufferMidSpace &rArr; lStreamBufferDistance
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPAddTxData
</UL>

<P><STRONG><a name="[b7]"></a>lStreamBufferSpace</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, freertos_tcp_ip.o(i.lStreamBufferSpace))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lStreamBufferSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreRxData
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferFrontSpace
</UL>

<P><STRONG><a name="[141]"></a>prvCheckOptions</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvCheckOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCheckOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[115]"></a>prvCheckRxData</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvCheckRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCheckRxData
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[e5]"></a>prvHandleEstablished</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, freertos_tcp_ip.o(i.prvHandleEstablished))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowTxDone
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowRxEmpty
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTCPWindowTxAck
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleFin
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPAddTxData
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferGet
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[ee]"></a>prvHandleListen</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvHandleListen))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvHandleListen &rArr; prvTCPSendReset &rArr; prvTCPReturnPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_socket
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSocketCopy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendReset
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPCreateWindow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSocketSetMSS
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[f4]"></a>prvHandleSynReceived</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, freertos_tcp_ip.o(i.prvHandleSynReceived))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvHandleSynReceived &rArr; vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPWindowInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[10e]"></a>prvSendData</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, freertos_tcp_ip.o(i.prvSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvSendData &rArr; prvTCPReturnPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferFrontSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[116]"></a>prvSetOptions</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, freertos_tcp_ip.o(i.prvSetOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = prvSetOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[117]"></a>prvSetSynAckOptions</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, freertos_tcp_ip.o(i.prvSetSynAckOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvSetSynAckOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[f1]"></a>prvSocketSetMSS</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, freertos_tcp_ip.o(i.prvSocketSetMSS))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
</UL>

<P><STRONG><a name="[110]"></a>prvStoreRxData</STRONG> (Thumb, 176 bytes, Stack size 72 bytes, freertos_tcp_ip.o(i.prvStoreRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvStoreRxData &rArr; prvTCPSendReset &rArr; prvTCPReturnPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPWindowRxCheck
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendReset
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferSpace
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPAddRxdata
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
</UL>

<P><STRONG><a name="[e7]"></a>prvTCPAddTxData</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, freertos_tcp_ip.o(i.prvTCPAddTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvTCPAddTxData &rArr; lTCPWindowTxAdd &rArr; vTCPTimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPWindowTxAdd
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferMidSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPSocketCheck
</UL>

<P><STRONG><a name="[112]"></a>prvTCPBufferResize</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, freertos_tcp_ip.o(i.prvTCPBufferResize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
</UL>

<P><STRONG><a name="[f2]"></a>prvTCPCreateWindow</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvTCPCreateWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = prvTCPCreateWindow &rArr; vTCPWindowCreate &rArr; vTCPWindowInit
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPWindowCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
</UL>

<P><STRONG><a name="[ea]"></a>prvTCPHandleFin</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, freertos_tcp_ip.o(i.prvTCPHandleFin))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvTCPHandleFin &rArr; vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleState
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[114]"></a>prvTCPHandleState</STRONG> (Thumb, 404 bytes, Stack size 48 bytes, freertos_tcp_ip.o(i.prvTCPHandleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = prvTCPHandleState &rArr; prvHandleEstablished &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPHandleFin
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreRxData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSynAckOptions
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetOptions
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleSynReceived
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckRxData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[118]"></a>prvTCPNextTimeout</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, freertos_tcp_ip.o(i.prvTCPNextTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvTCPNextTimeout &rArr; xTCPWindowTxHasData &rArr; ulTimerGetAge
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowTxHasData
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPSocketCheck
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[11a]"></a>prvTCPPrepareConnect</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, freertos_tcp_ip.o(i.prvTCPPrepareConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvTCPPrepareConnect &rArr; FreeRTOS_OutputARPRequest &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPCreateWindow
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSocketSetMSS
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eARPGetCacheEntry
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_OutputARPRequest
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
</UL>

<P><STRONG><a name="[eb]"></a>prvTCPPrepareSend</STRONG> (Thumb, 412 bytes, Stack size 64 bytes, freertos_tcp_ip.o(i.prvTCPPrepareSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowTxDone
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTCPWindowTxGet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPBufferResize
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferDistance
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendRepeated
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleEstablished
</UL>

<P><STRONG><a name="[10f]"></a>prvTCPReturnPacket</STRONG> (Thumb, 540 bytes, Stack size 96 bytes, freertos_tcp_ip.o(i.prvTCPReturnPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTCPReturnPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lStreamBufferFrontSpace
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateProtocolChecksum
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usGenerateChecksum
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendReset
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendRepeated
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSendData
</UL>

<P><STRONG><a name="[11c]"></a>prvTCPSendPacket</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvTCPSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = prvTCPSendPacket &rArr; prvTCPSendRepeated &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendRepeated
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareConnect
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetSynAckOptions
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPSocketCheck
</UL>

<P><STRONG><a name="[11d]"></a>prvTCPSendRepeated</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, freertos_tcp_ip.o(i.prvTCPSendRepeated))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = prvTCPSendRepeated &rArr; prvTCPPrepareSend &rArr; prvTCPBufferResize &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPPrepareSend
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPSendPacket
</UL>

<P><STRONG><a name="[ef]"></a>prvTCPSendReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, freertos_tcp_ip.o(i.prvTCPSendReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvTCPSendReset &rArr; prvTCPReturnPacket &rArr; xNetworkInterfaceOutput &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTCPReturnPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvStoreRxData
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[f0]"></a>prvTCPSocketCopy</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, freertos_tcp_ip.o(i.prvTCPSocketCopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = prvTCPSocketCopy &rArr; vSocketClose &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketBind
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHandleListen
</UL>

<P><STRONG><a name="[130]"></a>prvTCPSocketIsActive</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, freertos_tcp_ip.o(i.prvTCPSocketIsActive))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[11e]"></a>prvTCPStatusAgeCheck</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, freertos_tcp_ip.o(i.prvTCPStatusAgeCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvTCPStatusAgeCheck &rArr; vTCPStateChange &rArr; FreeRTOS_closesocket &rArr; xSendEventStructToIPTask &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vSocketClose
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPSocketCheck
</UL>

<P><STRONG><a name="[11f]"></a>prvTCPTouchSocket</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freertos_tcp_ip.o(i.prvTCPTouchSocket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvTCPTouchSocket
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTCPStateChange
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xProcessReceivedTCPPacket
</UL>

<P><STRONG><a name="[149]"></a>prvTCPWindowTxHasSpace</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, freertos_tcp_win.o(i.prvTCPWindowTxHasSpace))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowTxHasData
</UL>

<P><STRONG><a name="[129]"></a>ulTimerGetAge</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, freertos_tcp_win.o(i.ulTimerGetAge))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ulTimerGetAge
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTCPWindowTxHasData
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTCPWindowTxGet
</UL>

<P><STRONG><a name="[be]"></a>vTCPTimerSet</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, freertos_tcp_win.o(i.vTCPTimerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTCPTimerSet
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTCPWindowTxGet
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lTCPWindowTxAdd
</UL>

<P><STRONG><a name="[9f]"></a>InitialiseNetwork</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, networkhal.o(i.InitialiseNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = InitialiseNetwork &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setEthernetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceInitialise
</UL>

<P><STRONG><a name="[a2]"></a>SendData</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, networkhal.o(i.SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SendData &rArr; EMAC_WritePacketBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_WritePacketBuffer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateTxProduceIndex
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_CheckTransmitIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xNetworkInterfaceOutput
</UL>

<P><STRONG><a name="[35]"></a>prvEMACDeferredInterruptHandlerTask</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, networkhal.o(i.prvEMACDeferredInterruptHandlerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvEMACDeferredInterruptHandlerTask &rArr; pxGetNetworkBufferWithDescriptor &rArr; vReleaseNetworkBufferAndDescriptor &rArr; xQueueGenericSend &rArr; xTaskResumeAll
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdateRxConsumeIndex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_ReadPacketBuffer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_GetReceiveDataSize
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_CheckReceiveIndex
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_CheckReceiveDataStatus
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vReleaseNetworkBufferAndDescriptor
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxGetNetworkBufferWithDescriptor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xSendEventStructToIPTask
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eConsiderFrameForProcessing
</UL>
<BR>[Address Reference Count : 1]<UL><LI> networkhal.o(i.InitialiseNetwork)
</UL>
<P><STRONG><a name="[100]"></a>prvParseDNSReply</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, freertos_dns.o(i.prvParseDNSReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvParseDNSReply
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSkipNameField
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulDNSHandlePacket
</UL>

<P><STRONG><a name="[101]"></a>prvSkipNameField</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, freertos_dns.o(i.prvSkipNameField))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvParseDNSReply
</UL>

<P><STRONG><a name="[72]"></a>read_PHY</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.read_PHY))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_UpdatePHYStatus
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYMode
</UL>

<P><STRONG><a name="[75]"></a>rx_descr_init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.rx_descr_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[74]"></a>setEmacAddr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.setEmacAddr))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[76]"></a>tx_descr_init</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lpc17xx_emac.o(i.tx_descr_init))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
</UL>

<P><STRONG><a name="[71]"></a>write_PHY</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lpc17xx_emac.o(i.write_PHY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = write_PHY
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_Init
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMAC_SetPHYMode
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
